import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

consumer_key = 'akW4X4GYqcwbpRGUOcoMLTCeF'
consumer_secret = 'VmVyzovhSfP1xNeDTP7u9GtYAXReorC6MU7Ncu34h033qmr4er'
acces_token = '1203528906684416000-hSJ4bUUKjHEdo1pvrf8WlnIqGyoRUs'
acces_t_secret = 'bPibfQ8atxnTBGdWw3bGmrFrQdENverFHgkTEg8ShTA91'

authenticate = tweepy.OAuthHandler(consumer_key, consumer_secret)

authenticate.set_access_token(acces_token, acces_t_secret)

api = tweepy.API(authenticate, wait_on_rate_limit= True)

hashtag = api.user_timeline(screen_name='JAVERIANA', lang='en', tweet_mode='extended', count=100)

print('show 5 tweets')
i=1
for tweet in hashtag[:5]:
  print(str(i) + ') ' + tweet.full_text + '\n')
  i += 1

df = pd.DataFrame([tweet.full_text for tweet in hashtag], columns=['Tweets'])
df.head()

def clean_text(text): #limpiar
  text = re.sub(r'@[A-Za-z09]+', '', text) #limpiar menciones
  text = re.sub(r'#', '', text) #limpiar los hashtag
  text = re.sub(r'RT[\s]+', '', text) #limpiar marcas de  RT
  text = re.sub(r'https?:\/\/?', '', text) #limpiar links

  return text

df['Tweets'] = df['Tweets'].apply(clean_text)
df.head()

def get_subjectivity(text):
  return TextBlob(text).sentiment.subjectivity

def get_polarity(text):
  return TextBlob(text).sentiment.polarity

df['Subjectivity'] = df['Tweets'].apply(get_subjectivity)
df['Polarity'] = df['Tweets'].apply(get_polarity)

df.head()

all_words = ' '.join( [twts for twts in df['Tweets']])
word_Cloud = WordCloud(width=500, height=300, random_state=21, max_font_size=119).generate(all_words)

plt.imshow(word_Cloud, interpolation='bilinear')
plt.axis('off')
plt.show()

def analysis(score):
  if score < 0:
    return 'Negative'
   elif score == 0:
     return 'Neutral'
   else:
    return 'Positive'
 

df['Analysis'] = df['Polarity'].apply(analysis)

df

j=1
sortedDF = df.sort_values(by=['Polarity'])
for i in range(0, sortedDF.shape[0]):
  if(sortedDF['Analysis'][i] == 'Positive'):
    print(str(j) + ') ' + sortedDF['Tweets'][i])
    print()
    j += 1

j=1
sortedDF = df.sort_values(by=['Polarity'], ascending=False)
for i in range(0, sortedDF.shape[0]):
  if(sortedDF['Analysis'][i] == 'Negative'):
    print(str(j) + ') ' + sortedDF['Tweets'][i])
    print()
    j += 1

plt.figure(figsize=(8,6))
for i in range(0, df.shape[0]):
  plt.scatter(df['Polarity'][i], df['Subjectivity'][i], color='blue')

plt.title('Analisis de sentimientos')
plt.xlabel('polarity')
plt.ylabel('subjectivity')
plt.show()

ptweet = df[df.Analysis == 'Positive']
pteet = ptweet['Tweets']

round(ptweet.shape[0] / df.shape[0] * 100, 1)

ntweet = df[df.Analysis == 'Negative']
nteet = ntweet['Tweets']

round(ntweet.shape[0] / df.shape[0] * 100, 1)

df['Analysis'].value_counts()

plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Counts')
df['Analysis'].value_counts().plot(kind='bar')
plt.show()